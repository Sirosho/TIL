Git Branch

여러명이 나눠서 개발하되 수정, 혹은 어느 부분의 삭제가 용이하도록 해줌

한 프로젝트의 큰 줄기라고 이해하자.

실무에서는 완성된   안정적인 코드만 main에 커밋함 보통은 아무나 main 브랜치에 커밋할 권한이 없음

git branch 생성된 브랜치 목록을 볼 수 있음


## git branch <branch-name> 브랜치 생성

$ git branch oldsong   // 새 브랜치 생성 
$ git branch           // 브랜치 목록 확인
$ git switch oldsong   // 새 브랜치로 이동


**branch 생성 시점을 조절 할수있는지 알아보자

git branch 를 git init 하기 전에 하면 어떻게 될까?

git log --oneline --all --graph 로 브랜치별 진행상황을 구분해서 볼 수 있음


**브랜치가 갈라지면서 생길수 있는 데이터 적인 문제는 무엇이 있을까?

커밋을 하지 않으면 git switch 가 불가능하다


git switch -c <branch-name> 만들면서 스위치 해버리는 명령어!

추가되는 브랜치는 만드는 브랜치를 기준으로 복제된다


git checkout 브랜치 이름 으로도 스위치가 가능하다

## `checkout`과 `switch`의 차이점

 `checkout` 명령어는 브랜치 전환, 특정 커밋으로 작업 트리 되돌리기, 파일 상태 되돌리기 등 다양한 작업을 수행할 수 있습니다. 이는 매우 강력한 기능이지만, 같은 명령어가 너무 많은 기능을 담당하면 사용하는데 혼란을 줄 수 있습니다.

따라서 Git은 이를 해결하기 위해 `checkout` 명령어의 브랜치 전환 기능을 `switch` 명령어로 분리하였습니다. 
이로써, `switch`는 브랜치 전환, `checkout`은 작업 트리나 파일의 상태를 변경하는 작업에 각각 집중할 수 있게 되었습니다.


git branch -d 브랜치명 으로  브랜치를 지울수 있다 단 지우기 위해서는 지우려는 브랜치에 위치하고있으면 안된다.

## 이미 커밋이 있는 브랜치는 git branch -D 브랜치명 으로 강제 삭제가 가능하다 소문자 -d 로는 불가능 (안전장치라 생각하자)

git branch -m new_branch_name 로 현재 브랜치의 이름을 변경할 수 있다.

현재위치가 아닌 다른 브랜치의 이름을 변경 하려면 git branch -m old_branch_name new_branch_name 이렇게 명시를 한 후 변경할 브랜치명을 지정해주면 된다.


git kraken 으로 직관적인 ui로 사용이 가능하다. 하지만 우선 명령어 작업방식을 공부하자!

** 실수로 내용을 수정 후 add까지 해놓은 상태에서 add를 취소하고 다시 원래로 돌아갈수있는지 보자

** 자동으로 깃 애드 해주는 명령어가 있었는데 알아만 보자 암튼 위험해서 안쓰는게 좋다고 생각함

** 브랜치는 삭제되었으나 커밋 로그에는 남아있다. (페트로누스 exercise의 경우에서 생긴 궁금증 이었음)

    브랜치만 지워지고 커밋은 남아있음. 추후에 브랜치를 다시 추가가 가능하다.

** 브랜치와 커밋의 관계를 이미지로 한번 생각해보자
