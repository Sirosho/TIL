GIT과 버전관리시스템

코드 품질 : 수정이 용이하고 가독성이 좋은 코드

GIT 을 잘 배워놓자

GIT으로 작업한것을 업로드하는곳이 GIthub, Gitlab 등 이다.

## Git을 사용하는 2가지 방법

1. CLI : 명령어 기반 버전관리   (터미널 작업)
2. GUI : 그래픽 기반 버전관리 툴. (소스트리, GitHub Desktop, Git Kraken 등)




GIT 다운로드 후 

vscode 설정.
git bash 실행 후 폰트 사이즈 보기좋게


GIT 기반설정

git에 내 정보를 기록하기위해

$ git config --global user.name "유저닉네임" // 닉네임은 github, gitlab에서 사용할 닉네임 추천
$ git config --global user.email "유저이메일"   // 이메일은 실제 github이나 gitlab 가입메일

이렇게 하면 후에 git log 했을때 정보가 뜨게된다.


git config --global init.defaultBranch main 기본 브랜치 이름(master) 를 main 으로 변경 하는 코드


기본 브랜치 이름이 master에서 main으로 바꾸는 이유

master 라는 단어 자체에 인종차별 논란이 있어서 main으로 바꾸는 운동이있었다~

암튼 git은 master가 기본이고
 깃허브는 main을 써서 맞춰주는게 좋음

깃 기반설정 할떄에 잘 되었는지 확인하는법은
적은 소스코드의 설정값 부분을 지우고 엔터를 치면 현재의 설정값이 나온다

방향키 위 를 누르면 전에 쳤던 소스가 나옴.

## GIT bash 기본 터미널 명령어

pwd : 터미널이 현재 보고있는 폴더의 위치

ls: 그 폴더의 하위 파일들 보여줌

clear: 화면 정리

ls -l : 디테일한 파일들의 정보들 (수정시간 등)

cd .. : 한단계 나가기

cd tab tab : 현재 위치에 있는 폴더들

폴더명 입력도중 탭 누르면 자동완성.

cd ~ 최초 위치로 감

start . 현재 위치가 실제로 열림

start . 열고싶은폴더 : 그 폴더가 열림

mkdir 이름 : 현재 위치에 폴더만들기 (메잌 디렉토리)

touch 이름.확장자 : 파일 만들기

notepad hello.txt : 메모장으로 헬로 라는 파일을 연다

code hello.txt : vs 코드로 열기

touch xxx.txt yyy.txt zzz.txt 이런식으로 한번에 세개를 만들수 있음

code . : vs코드로 현재 위치 자체를 열기

noterpad ../aaa/zzz/xxx.txt 이런식으로 한번에 가서 파일을 열수도, 원하는 폴더로 이동할수도있음

반대로 들어갔다 나갈수도있지만 aaa/zzz && ../ 이런식으로 and 연산자를 써줘야함 굳이 할필요가 없다..


rm 파일명: 파일 삭제하기 (리무브)

rm -rf 폴더명 : 폴더 삭제하기 (폴더의 모든 내용이 삭제되니 주의해서 사용)

깃 배쉬는 리눅스 언어를 사용한다.

윈도우의 cmd는 리눅스와 언어가 다르지만 리눅스 언어를 사용하는
파워 쉘이 있다.


git init : 현재 폴더를 버전관리하겠다! 라고 지정 
프로그래밍 시작 할때 최초에 사용 (로컬 레포지토리)

git init 한 폴더의 하위든 상위는 또 git init하면 큰일남


# 폴더 앞에 .이 붙어있으면 숨김파일이다.

git status로 git init이 되고 있는지 확인하기

ls -a : 숨김파일까지 다 볼수있는 것


깃 워크플로우

1. 작업
2. 버전관리 할 파일 분류 (add)
3. 커밋

GIT에서 버전을 생성하는 법

1. git add로 파일을 올림

2. git commit으로 레포지토리에 커밋

## git 

git add 를 안하면 커밋이 안된다.

파일이 수정되면 git status에서 빨갛게 나옴

git status 로 현재 git의 상황을 알 수가 있음

git commit -m "~~~~" 로 vscode 안켜고 바로 텍스트 등록가능

git log 로 그동안의 커밋들을

git log --oneline 으로 그동안의 커밋과 코멘트만 볼 수 있음

* git add . 하면 모든 파일을 애드 함


커밋은 세밀하게 자주 해줘야 효율적인 수정이 가능합니다.

커밋 메시지는 보통 제목과 본문으로 분리해서 어떤 것이 수정되었는지에 대해 적힘
(Ai랑 연동해서 분석 및 작성해주는 툴도 있음)

커밋 메시지 본문이 72자를 넘기지 않는것이 좋음

git commit --amend 로 직전 커밋을 수정가능함 amend는 github에 공유하기전 로컬에서만 사용해야함.
공유된 커밋에 amend를 하면 꼬이게 되어있음

git restore --staged 파일명 으로 애드된 파일을 언스테이지 할 수 있다.

touch .gitignore 로 git add에서 트래킹되지 않는 파일을 지정 할 수 있음.

`.gitignore` 파일에서 사용할 수 있는 패턴 몇 가지는 다음과 같습니다:

- `*.log`: 모든 .log 파일을 무시합니다.
- `!important.log`: .gitignore 파일에서 더 나중에 나오는 패턴이 더 우선순위가 높으므로, `!important.log` 패턴은 important.log라는 이름의 파일은 무시하지 않도록 예외를 설정합니다.
- `/tmp`: 상대 경로로 시작하므로 프로젝트의 루트 디렉토리에 있는 tmp 디렉토리만 무시합니다.
- `debug/`: debug라는 이름의 디렉토리를 무시합니다.
- `doc/*.txt`: doc 디렉토리에 있는 .txt 파일을 무시합니다.


.gitignore 파일은 이미 커밋된 파일에는 영향을 미치지 않음.

gitignore.io 라는 사이트에서 개발언어별로 깃이그노어 템플릿을 적어줌



